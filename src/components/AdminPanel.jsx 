// src/components/AdminPanel.jsx
import React, { useState, useEffect } from 'react';
import { ArrowLeft, Plus, Edit, Trash, AlertCircle } from 'lucide-react';
import { useAdminAuth } from '../hooks/useAdminAuth';
import { adminService } from '../services/adminService';
import { useNavigate } from 'react-router-dom';

// Project Form Component
const ProjectForm = ({ project, onSubmit, onCancel }) => {
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    fundingGoal: 0,
    image: '',
    ...project
  });

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState(null);

  const handleChange = (e) => {
    const { name, value, type } = e.target;
    setFormData({
      ...formData,
      [name]: type === 'number' ? Number(value) : value
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError(null);

    try {
      await onSubmit(formData);
    } catch (error) {
      setError(error.message);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4 bg-white p-4 rounded-lg shadow">
      {error && (
        <div className="bg-red-50 border-l-4 border-red-600 p-4 mb-4">
          <div className="flex items-center">
            <AlertCircle className="text-red-600 mr-2" size={20} />
            <p className="text-red-600">{error}</p>
          </div>
        </div>
      )}
      
      <div>
        <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-1">
          Project Title
        </label>
        <input
          id="title"
          name="title"
          type="text"
          value={formData.title}
          onChange={handleChange}
          required
          className="w-full p-2 border rounded-lg focus:ring-red-600 focus:border-red-600"
          placeholder="Enter project title"
        />
      </div>
      
      <div>
        <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">
          Description
        </label>
        <textarea
          id="description"
          name="description"
          value={formData.description}
          onChange={handleChange}
          required
          rows={3}
          className="w-full p-2 border rounded-lg focus:ring-red-600 focus:border-red-600"
          placeholder="Enter project description"
        />
      </div>
      
      <div>
        <label htmlFor="fundingGoal" className="block text-sm font-medium text-gray-700 mb-1">
          Funding Goal (CARES)
        </label>
        <input
          id="fundingGoal"
          name="fundingGoal"
          type="number"
          value={formData.fundingGoal}
          onChange={handleChange}
          required
          min={1}
          className="w-full p-2 border rounded-lg focus:ring-red-600 focus:border-red-600"
          placeholder="Enter funding goal"
        />
      </div>
      
      <div>
        <label htmlFor="image" className="block text-sm font-medium text-gray-700 mb-1">
          Image URL
        </label>
        <input
          id="image"
          name="image"
          type="url"
          value={formData.image}
          onChange={handleChange}
          className="w-full p-2 border rounded-lg focus:ring-red-600 focus:border-red-600"
          placeholder="Enter image URL (optional)"
        />
      </div>
      
      <div className="flex justify-end space-x-3 pt-3">
        <button
          type="button"
          onClick={onCancel}
          className="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200"
          disabled={isSubmitting}
        >
          Cancel
        </button>
        <button
          type="submit"
          className="px-4 py-2 text-white bg-red-600 rounded-lg hover:bg-red-700"
          disabled={isSubmitting}
        >
          {isSubmitting ? 'Submitting...' : project ? 'Update Project' : 'Create Project'}
        </button>
      </div>
    </form>
  );
};

// Care Package Form Component
const CarePackageForm = ({ carePackage, onSubmit, onCancel }) => {
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    threshold: 0,
    eligibility: 'Top Donor',
    ...carePackage
  });

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState(null);

  const handleChange = (e) => {
    const { name, value, type } = e.target;
    setFormData({
      ...formData,
      [name]: type === 'number' ? Number(value) : value
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError(null);

    try {
      await onSubmit(formData);
    } catch (error) {
      setError(error.message);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4 bg-white p-4 rounded-lg shadow">
      {error && (
        <div className="bg-red-50 border-l-4 border-red-600 p-4 mb-4">
          <div className="flex items-center">
            <AlertCircle className="text-red-600 mr-2" size={20} />
            <p className="text-red-600">{error}</p>
          </div>
        </div>
      )}
      
      <div>
        <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
          Package Name
        </label>
        <input
          id="name"
          name="name"
          type="text"
          value={formData.name}
          onChange={handleChange}
          required
          className="w-full p-2 border rounded-lg focus:ring-red-600 focus:border-red-600"
          placeholder="Enter package name"
        />
      </div>
      
      <div>
        <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">
          Description
        </label>
        <textarea
          id="description"
          name="description"
          value={formData.description}
          onChange={handleChange}
          required
          rows={2}
          className="w-full p-2 border rounded-lg focus:ring-red-600 focus:border-red-600"
          placeholder="Enter package description"
        />
      </div>
      
      <div>
        <label htmlFor="threshold" className="block text-sm font-medium text-gray-700 mb-1">
          Threshold (CARES)
        </label>
        <input
          id="threshold"
          name="threshold"
          type="number"
          value={formData.threshold}
          onChange={handleChange}
          required
          min={1}
          className="w-full p-2 border rounded-lg focus:ring-red-600 focus:border-red-600"
          placeholder="Minimum CARES to qualify"
        />
      </div>
      
      <div>
        <label htmlFor="eligibility" className="block text-sm font-medium text-gray-700 mb-1">
          Eligibility
        </label>
        <select
          id="eligibility"
          name="eligibility"
          value={formData.eligibility}
          onChange={handleChange}
          className="w-full p-2 border rounded-lg focus:ring-red-600 focus:border-red-600"
        >
          <option value="Top Donor">Top Donor</option>
          <option value="Top 3 Donors">Top 3 Donors</option>
          <option value="Top 10 Donors">Top 10 Donors</option>
          <option value="All Donors">All Donors</option>
        </select>
      </div>
      
      <div className="flex justify-end space-x-3 pt-3">
        <button
          type="button"
          onClick={onCancel}
          className="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200"
          disabled={isSubmitting}
        >
          Cancel
        </button>
        <button
          type="submit"
          className="px-4 py-2 text-white bg-red-600 rounded-lg hover:bg-red-700"
          disabled={isSubmitting}
        >
          {isSubmitting ? 'Submitting...' : carePackage ? 'Update Package' : 'Create Package'}
        </button>
      </div>
    </form>
  );
};

// Publisher Management Component
const PublisherManagement = () => {
  const [publishers, setPublishers] = useState([]);
  const [newPublisherWallet, setNewPublisherWallet] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  // Admin wallets for reference (should match the ones in useAdminAuth)
  const ADMIN_WALLETS = [
    '0x8aB0c174F40C5E22b00065C4Cc7b561c299Cad1C',
    '0x616A2336eC93ACdd1caA8CA17732285F34331bf0'
  ];

  useEffect(() => {
    fetchPublishers();
  }, []);

  const fetchPublishers = async () => {
    setIsLoading(true);
    setError(null);
    
    try {
      const publisherList = await adminService.getPublishers();
      setPublishers(publisherList);
    } catch (error) {
      console.error("Error fetching publishers:", error);
      setError("Failed to load publishers. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  const handleAddPublisher = async () => {
    if (!newPublisherWallet || !newPublisherWallet.startsWith('0x')) {
      setError("Please enter a valid wallet address starting with 0x");
      return;
    }

    setIsLoading(true);
    setError(null);
    
    try {
      await adminService.addPublisher(newPublisherWallet);
      setNewPublisherWallet('');
      fetchPublishers(); // Refresh the list
    } catch (error) {
      console.error("Error adding publisher:", error);
      setError(error.message || "Failed to add publisher. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  const handleRemovePublisher = async (publisherWallet) => {
    // Don't allow removing admin wallets
    if (ADMIN_WALLETS.includes(publisherWallet)) {
      setError("Cannot remove admin wallets");
      return;
    }

    if (window.confirm(`Are you sure you want to remove ${publisherWallet}?`)) {
      setIsLoading(true);
      setError(null);
      
      try {
        await adminService.removePublisher(publisherWallet);
        fetchPublishers(); // Refresh the list
      } catch (error) {
        console.error("Error removing publisher:", error);
        setError(error.message || "Failed to remove publisher. Please try again.");
      } finally {
        setIsLoading(false);
      }
    }
  };

  return (
    <div className="space-y-4">
      <h2 className="text-lg font-bold">Publisher Management</h2>
      
      {error && (
        <div className="bg-red-50 border-l-4 border-red-600 p-4">
          <div className="flex items-center">
            <AlertCircle className="text-red-600 mr-2" size={20} />
            <p className="text-red-600">{error}</p>
          </div>
        </div>
      )}
      
      <div className="bg-white p-4 rounded-lg shadow">
        <h3 className="font-medium mb-2">Add New Publisher</h3>
        <div className="flex space-x-2">
          <input
            type="text"
            value={newPublisherWallet}
            onChange={(e) => setNewPublisherWallet(e.target.value)}
            placeholder="Enter wallet address (0x...)"
            className="flex-1 p-2 border rounded-lg focus:ring-red-600 focus:border-red-600"
            disabled={isLoading}
          />
          <button
            onClick={handleAddPublisher}
            disabled={isLoading || !newPublisherWallet}
            className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:bg-gray-300 disabled:cursor-not-allowed"
          >
            {isLoading ? 'Adding...' : 'Add'}
          </button>
        </div>
      </div>
      
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <div className="p-4 border-b">
          <h3 className="font-medium">Authorized Publishers</h3>
        </div>
        
        {isLoading && publishers.length === 0 ? (
          <div className="p-4 text-center text-gray-500">Loading publishers...</div>
        ) : publishers.length === 0 ? (
          <div className="p-4 text-center text-gray-500">No publishers found</div>
        ) : (
          <div className="divide-y">
            {/* Add admin wallets first */}
            {ADMIN_WALLETS.map((wallet) => (
              <div key={wallet} className="p-4 flex justify-between items-center">
                <div>
                  <span className="font-mono">{wallet.substring(0, 6)}...{wallet.substring(wallet.length - 4)}</span>
                  <span className="ml-2 text-xs bg-red-100 text-red-600 px-2 py-1 rounded-full">
                    Admin
                  </span>
                </div>
                <div>
                  {/* Cannot remove admin wallets */}
                </div>
              </div>
            ))}
            
            {/* Then list other publishers */}
            {publishers
              .filter(p => !ADMIN_WALLETS.includes(p.walletAddress))
              .map((publisher) => (
                <div key={publisher.id} className="p-4 flex justify-between items-center">
                  <span className="font-mono">
                    {publisher.walletAddress.substring(0, 6)}...
                    {publisher.walletAddress.substring(publisher.walletAddress.length - 4)}
                  </span>
                  <button
                    onClick={() => handleRemovePublisher(publisher.walletAddress)}
                    disabled={isLoading}
                    className="text-red-600 hover:text-red-800"
                  >
                    <Trash size={18} />
                  </button>
                </div>
              ))}
          </div>
        )}
      </div>
    </div>
  );
};

// Main Admin Panel Component
const AdminPanel = () => {
  const { isAdmin, isLoading: authLoading } = useAdminAuth();
  const [activeTab, setActiveTab] = useState('projects');
  const [projects, setProjects] = useState([]);
  const [carePackages, setCarePackages] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // States for form handling
  const [showProjectForm, setShowProjectForm] = useState(false);
  const [editingProject, setEditingProject] = useState(null);
  const [showPackageForm, setShowPackageForm] = useState(false);
  const [editingPackage, setEditingPackage] = useState(null);
  
  // For navigation
  const navigate = useNavigate();

  // Fetch data on load
  useEffect(() => {
    if (isAdmin) {
      fetchData();
    }
  }, [isAdmin]);

  const fetchData = async () => {
    setIsLoading(true);
    setError(null);
    
    try {
      // These should be functions from your data service that fetch all projects and care packages
      // You'll need to implement these in your firebase-db.js or similar file
      const fetchedProjects = await getProjects();
      const fetchedPackages = await getCarePackages();
      
      setProjects(fetchedProjects);
      setCarePackages(fetchedPackages);
    } catch (error) {
      console.error("Error fetching data:", error);
      setError("Failed to load data. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  // Project CRUD functions
  const handleCreateProject = async (projectData) => {
    try {
      await adminService.createProject(projectData);
      setShowProjectForm(false);
      fetchData(); // Refresh the list
    } catch (error) {
      console.error("Error creating project:", error);
      throw error;
    }
  };

  const handleUpdateProject = async (projectData) => {
    try {
      await adminService.updateProject(editingProject.id, projectData);
      setEditingProject(null);
      setShowProjectForm(false);
      fetchData(); // Refresh the list
    } catch (error) {
      console.error("Error updating project:", error);
      throw error;
    }
  };

  const handleDeleteProject = async (projectId) => {
    if (window.confirm("Are you sure you want to delete this project?")) {
      try {
        await adminService.deleteProject(projectId);
        fetchData(); // Refresh the list
      } catch (error) {
        console.error("Error deleting project:", error);
        alert("Failed to delete project. Please try again.");
      }
    }
  };

  // Care Package CRUD functions
  const handleCreatePackage = async (packageData) => {
    try {
      await adminService.createCarePackage(packageData);
      setShowPackageForm(false);
      fetchData(); // Refresh the list
    } catch (error) {
      console.error("Error creating care package:", error);
      throw error;
    }
  };

  const handleUpdatePackage = async (packageData) => {
    try {
      await adminService.updateCarePackage(editingPackage.id, packageData);
      setEditingPackage(null);
      setShowPackageForm(false);
      fetchData(); // Refresh the list
    } catch (error) {
      console.error("Error updating care package:", error);
      throw error;
    }
  };

  const handleDeletePackage = async (packageId) => {
    if (window.confirm("Are you sure you want to delete this care package?")) {
      try {
        await adminService.deleteCarePackage(packageId);
        fetchData(); // Refresh the list
      } catch (error) {
        console.error("Error deleting care package:", error);
        alert("Failed to delete care package. Please try again.");
      }
    }
  };

  // If still checking admin status
  if (authLoading) {
    return (
      <div className="p-6 text-center">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/4 mx-auto mb-4"></div>
          <div className="h-64 bg-gray-200 rounded mb-4"></div>
        </div>
      </div>
    );
  }

  // If not admin, show access denied
  if (!isAdmin) {
    return (
      <div className="p-6 text-center">
        <div className="bg-red-50 border-l-4 border-red-600 p-4 inline-block">
          <h2 className="text-xl font-bold text-red-600 mb-2">Admin Access Required</h2>
          <p className="mb-4">You need to connect with an authorized admin wallet to access this page.</p>
          <button 
            onClick={() => navigate('/')} 
            className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700"
          >
            Back to Home
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto max-w-4xl p-4">
      <div className="flex items-center mb-6">
        <button 
          onClick={() => navigate(-1)} 
          className="mr-3 text-gray-600 hover:text-gray-900"
        >
          <ArrowLeft size={24} />
        </button>
        <h1 className="text-2xl font-bold">Admin Dashboard</h1>
      </div>
      
      {error && (
        <div className="bg-red-50 border-l-4 border-red-600 p-4 mb-4">
          <div className="flex items-center">
            <AlertCircle className="text-red-600 mr-2" size={20} />
            <p className="text-red-600">{error}</p>
          </div>
        </div>
      )}
      
      {/* Tab Navigation */}
      <div className="flex border-b mb-6">
        <button
          onClick={() => setActiveTab('projects')}
          className={`px-4 py-2 mr-2 ${
            activeTab === 'projects'
              ? 'border-b-2 border-red-600 text-red-600 font-medium'
              : 'text-gray-600 hover:text-gray-900'
          }`}
        >
          Manage Projects
        </button>
        <button
          onClick={() => setActiveTab('packages')}
          className={`px-4 py-2 mr-2 ${
            activeTab === 'packages'
              ? 'border-b-2 border-red-600 text-red-600 font-medium'
              : 'text-gray-600 hover:text-gray-900'
          }`}
        >
          Manage Care Packages
        </button>
        <button
          onClick={() => setActiveTab('publishers')}
          className={`px-4 py-2 ${
            activeTab === 'publishers'
              ? 'border-b-2 border-red-600 text-red-600 font-medium'
              : 'text-gray-600 hover:text-gray-900'
          }`}
        >
          Manage Publishers
        </button>
      </div>
      
      {/* Tab Content */}
      <div className="pb-16">
        {/* Projects Tab */}
        {activeTab === 'projects' && (
          <div>
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-lg font-semibold">Projects</h2>
              <button
                onClick={() => {
                  setEditingProject(null);
                  setShowProjectForm(true);
                }}
                className="flex items-center px-3 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700"
              >
                <Plus size={16} className="mr-1" />
                Add Project
              </button>
            </div>
            
            {showProjectForm && (
              <div className="mb-6">
                <ProjectForm
                  project={editingProject}
                  onSubmit={editingProject ? handleUpdateProject : handleCreateProject}
                  onCancel={() => {
                    setShowProjectForm(false);
                    setEditingProject(null);
                  }}
                />
              </div>
            )}
            
            {isLoading ? (
              <div className="text-center py-8">
                <div className="animate-pulse">
                  <div className="h-16 bg-gray-200 rounded mb-4"></div>
                  <div className="h-16 bg-gray-200 rounded mb-4"></div>
                  <div className="h-16 bg-gray-200 rounded"></div>
                </div>
              </div>
            ) : projects.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                No projects found. Create your first project!
              </div>
            ) : (
              <div className="space-y-4">
                {projects.map(project => (
                  <div key={project.id} className="bg-white rounded-lg shadow p-4">
                    <div className="flex justify-between items-start">
                      <div>
                        <h3 className="font-bold text-lg">{project.title}</h3>
                        <p className="text-gray-600">{project.description}</p>
                        
                        <div className="mt-3">
                          <div className="w-full bg-gray-200 rounded-full h-2.5">
                            <div 
                              className="bg-red-600 h-2.5 rounded-full" 
                              style={{width: `${Math.min((project.currentAmount || 0) / project.fundingGoal * 100, 100)}%`}}
                            ></div>
                          </div>
                          <div className="flex justify-between text-sm mt-1">
                            <span>{project.currentAmount || 0} / {project.fundingGoal} CARES</span>
                            <span>{project.supportersCount || 0} supporters</span>
                          </div>
                        </div>
                      </div>
                      
                      <div className="flex space-x-2">
                        <button
                          onClick={() => {
                            setEditingProject(project);
                            setShowProjectForm(true);
                          }}
                          className="p-1 text-blue-600 hover:text-blue-800"
                          title="Edit Project"
                        >
                          <Edit size={18} />
                        </button>
                        <button
                          onClick={() => handleDeleteProject(project.id)}
                          className="p-1 text-red-600 hover:text-red-800"
                          title="Delete Project"
                        >
                          <Trash size={18} />
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
        
        {/* Care Packages Tab */}
        {activeTab === 'packages' && (
          <div>
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-lg font-semibold">Care Packages</h2>
              <button
                onClick={() => {
                  setEditingPackage(null);
                  setShowPackageForm(true);
                }}
                className="flex items-center px-3 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700"
              >
                <Plus size={16} className="mr-1" />
                Add Care Package
              </button>
            </div>
            
            {showPackageForm && (
              <div className="mb-6">
                <CarePackageForm
                  carePackage={editingPackage}
                  onSubmit={editingPackage ? handleUpdatePackage : handleCreatePackage}
                  onCancel={() => {
                    setShowPackageForm(false);
                    setEditingPackage(null);
                  }}
                />
              </div>
            )}
            
            {isLoading ? (
              <div className="text-center py-8">
                <div className="animate-pulse">
                  <div className="h-16 bg-gray-200 rounded mb-4"></div>
                  <div className="h-16 bg-gray-200 rounded mb-4"></div>
                  <div className="h-16 bg-gray-200 rounded"></div>
                </div>
              </div>
            ) : carePackages.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                No care packages found. Create your first care package!
              </div>
            ) : (
              <div className="space-y-4">
                {carePackages.map(pkg => (
                  <div key={pkg.id} className="bg-white rounded-lg shadow p-4">
                    <div className="flex justify-between items-start">
                      <div className="flex-1">
                        <div className="flex items-center">
                          <h3 className="font-bold">{pkg.name}</h3>
                          <span className="ml-2 text-xs bg-yellow-100 text-yellow-800 px-2 py-1 rounded-full">
                            {pkg.eligibility}
                          </span>
                        </div>
                        <p className="text-gray-600 mt-1">{pkg.description}</p>
                        <p className="mt-2 text-sm">
                          <span className="font-semibold">Threshold:</span> {pkg.threshold} CARES
                        </p>
                      </div>
                      
                      <div className="flex space-x-2">
                        <button
                          onClick={() => {
                            setEditingPackage(pkg);
                            setShowPackageForm(true);
                          }}
                          className="p-1 text-blue-600 hover:text-blue-800"
                          title="Edit Care Package"
                        >
                          <Edit size={18} />
                        </button>
                        <button
                          onClick={() => handleDeletePackage(pkg.id)}
                          className="p-1 text-red-600 hover:text-red-800"
                          title="Delete Care Package"
                        >
                          <Trash size={18} />
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
        
        {/* Publishers Tab */}
        {activeTab === 'publishers' && (
          <PublisherManagement />
        )}
      </div>
    </div>
  );
};

export default AdminPanel;